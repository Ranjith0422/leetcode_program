import java.util.*;

public class Solution {
    public int mostBooked(int n, int[][] meetings) {
        Arrays.sort(meetings, Comparator.comparingInt(a -> a[0]));

        // PriorityQueue for available rooms: sorted by room number
        PriorityQueue<Integer> available = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            available.offer(i);
        }

        // PriorityQueue for busy rooms: sorted by end time, then by room number
        PriorityQueue<long[]> busy = new PriorityQueue<>(
            (a, b) -> a[0] != b[0] ? Long.compare(a[0], b[0]) : Long.compare(a[1], b[1])
        );

        int[] count = new int[n];

        for (int[] meeting : meetings) {
            int start = meeting[0];
            int end = meeting[1];
            int duration = end - start;

            // Free rooms whose meeting ended before or at current start time
            while (!busy.isEmpty() && busy.peek()[0] <= start) {
                available.offer((int) busy.poll()[1]);
            }

            if (!available.isEmpty()) {
                // Use the lowest-numbered available room
                int room = available.poll();
                busy.offer(new long[]{start + duration, room});
                count[room]++;
            } else {
                // Delay meeting to the earliest finish time
                long[] earliest = busy.poll();
                long newStart = earliest[0];
                int room = (int) earliest[1];
                busy.offer(new long[]{newStart + duration, room});
                count[room]++;
            }
        }

        // Find the room with the most meetings
        int maxRoom = 0;
        for (int i = 1; i < n; i++) {
            if (count[i] > count[maxRoom]) {
                maxRoom = i;
            }
        }
        return maxRoom;
    }
}
